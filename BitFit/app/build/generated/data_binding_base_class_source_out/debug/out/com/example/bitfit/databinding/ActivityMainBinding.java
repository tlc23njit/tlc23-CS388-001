// Generated by view binder compiler. Do not edit!
package com.example.bitfit.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.bitfit.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView Average;

  @NonNull
  public final Button Clear;

  @NonNull
  public final TextView Date;

  @NonNull
  public final EditText Input;

  @NonNull
  public final TextView customTitle;

  @NonNull
  public final RecyclerView list;

  @NonNull
  public final ConstraintLayout main;

  @NonNull
  public final Button submit;

  @NonNull
  public final Toolbar toolbar;

  private ActivityMainBinding(@NonNull ConstraintLayout rootView, @NonNull TextView Average,
      @NonNull Button Clear, @NonNull TextView Date, @NonNull EditText Input,
      @NonNull TextView customTitle, @NonNull RecyclerView list, @NonNull ConstraintLayout main,
      @NonNull Button submit, @NonNull Toolbar toolbar) {
    this.rootView = rootView;
    this.Average = Average;
    this.Clear = Clear;
    this.Date = Date;
    this.Input = Input;
    this.customTitle = customTitle;
    this.list = list;
    this.main = main;
    this.submit = submit;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.Average;
      TextView Average = ViewBindings.findChildViewById(rootView, id);
      if (Average == null) {
        break missingId;
      }

      id = R.id.Clear;
      Button Clear = ViewBindings.findChildViewById(rootView, id);
      if (Clear == null) {
        break missingId;
      }

      id = R.id.Date;
      TextView Date = ViewBindings.findChildViewById(rootView, id);
      if (Date == null) {
        break missingId;
      }

      id = R.id.Input;
      EditText Input = ViewBindings.findChildViewById(rootView, id);
      if (Input == null) {
        break missingId;
      }

      id = R.id.custom_title;
      TextView customTitle = ViewBindings.findChildViewById(rootView, id);
      if (customTitle == null) {
        break missingId;
      }

      id = R.id.list;
      RecyclerView list = ViewBindings.findChildViewById(rootView, id);
      if (list == null) {
        break missingId;
      }

      ConstraintLayout main = (ConstraintLayout) rootView;

      id = R.id.submit;
      Button submit = ViewBindings.findChildViewById(rootView, id);
      if (submit == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new ActivityMainBinding((ConstraintLayout) rootView, Average, Clear, Date, Input,
          customTitle, list, main, submit, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
